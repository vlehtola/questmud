resolve(string category, string class, string type, int effect_bonus, string target) {
  object ob, tgt, caster;
  string spell, file, tmp;
  caster = this_player();
  spell = class+" "+type;
  tmp = get_object(spell);
  if(!tmp) tmp = get_object(type);
  if(tmp) file = "/guilds/spell_obj/"+tmp;
  else return 0; /* spell.c continues the search for spell elsewhere */

  tgt = present(target, environment(this_player()) );
  if(!tgt) {
    tell_object(this_player(), "No such target present.\n");
    return 1;
  }  
  ob = clone_object(file);
  ob->start(tgt,effect_bonus,class,caster);
  return 1;
}

get_object(string spell) {
  switch(spell) {
   case "sol tdr": return "shield";
   case "fla tdr": return "sphere_of_protection";
   case "zzt tdr": return "stone_skin";
   case "jht": return "protection";
   case "cvk": return "stat_boost";
   case "rhj": return "vulnerability";
  }
}
