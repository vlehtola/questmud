offensive_resolve(type,class,category,effect_bonus,target,object caster) {
    int damage, mastery, mastery_damage, effect_damage, divider, source;
    int boost, value, skill, reflect;
    object ob, next_ob, counter;
    string text_word,text_word2, temp_str,dam_type;

    if (class == "sol") { text_word = "Earth"; 
dam_type = "physical";
mastery = this_player()->query_skills("mastery of earth");
    }
    if (class == "fla") { text_word = "Fire";
dam_type = "fire";
mastery = this_player()->query_skills("knowledge of heat");
    }
    if (class == "brr") { text_word = "Ice";
dam_type = "cold";
mastery = this_player()->query_skills("lore of cold");
    }
    if (class == "zzt") { text_word = "Lightning";
dam_type = "electric";
mastery = this_player()->query_skills("theory of electricity");
    }
    if (type == "blt") { text_word2 = "Bolt"; }
    if (type == "strm") { text_word2 = "Storm"; }
    if (text_word == 0 || text_word2 == 0) { return; }
    if (!caster) { caster = this_player(); }

    boost = this_player()->query_sp_boost(1);
    if (effect_bonus > 100) { effect_bonus=100+(effect_bonus-100)/4; }

    damage=(effect_bonus)+(mastery/2)+(this_player()->query_int()/5);
    damage=(call_other("/guilds/obj/boost.c","offensive_boost",boost)*damage)/100;

    if (class == "sol") {
      damage = damage / 2;
    }

    if (type == "strm") {
        call_other("/guilds/obj/area_resolve.c", "resolve", damage, dam_type, text_word, text_word2);
        return 1;
    }

    /* resolve spells other than storm */

    if (!target) {
	write("Cast at whom?\n");
	return 1;
    }
    ob = present(lower_case(target), environment(this_player()));
    if (!ob || !living(ob)) {
        write("There is no " + capitalize(target) + " here.\n");
        return 1;
    }
    if (ob == caster) {
        write("Cast an offensive spell at yourself, huh?\n");
        return 1;
    }

    /* Reflect returns the spell in full, but 1/3 still hits the target //Celtron */
    reflect = ob->query_skills("reflect spell") - (this_player()->query_skills("reflect spell")*3/4);
    if (reflect > random(effect_bonus)) {
        write(capitalize(ob->query_name()) + " reflects a part of your spell and it hits YOU!\n");
        tell_object(ob, "You manage to reflect a part of " + capitalize(this_player()->query_name()) + "'s spell on " +
		this_player()->query_objective() + "self!\n");
        ob->casting_sp_reduce((boost/2));
        offensive_resolve(type,class,category,effect_bonus,this_player()->query_name(),ob);
	damage = damage / 3;
    }
    write("Your " + text_word + " " + text_word2 + " hits " + target + " in the torso!\n");
    say(capitalize(this_player()->query_name()) + "'s " + text_word + " " + text_word2 + " hits " + target + " in the torso!\n", ob);
    tell_object(ob, capitalize(this_player()->query_name()) + "'s " + text_word + " " + text_word2 + " hits YOU in the torso!\n");
    if(!random(1000)) {
     this_player()->set_mastery("Offensive spellcasting",(this_player()->query_mastery()["Offensive spellcasting"] + 1));
    }
    damage += damage * this_player()->query_mastery()["Offensive spellcasting"] / 200;

    if(!random(1000)) {
     this_player()->set_mastery("Dangerous "+text_word,(this_player()->query_mastery()["Dangerous "+text_word] + 1));
    }
    damage += damage * this_player()->query_mastery()["Dangerous "+text_word] / 200;

    /* saving throw? ym tune + randomia */
    if(random(ob->query_dex() + 500) < ob->query_dex()) {
      write(capitalize(target)+" avoids part of the blast!\n");
      tell_object(ob, "You avoid part of the blast!\n");
      if(this_player()->query_skills("proximity blast") > random(101)) {
        write("..but the spell still hits "+ob->query_name()+"!\n");
        tell_object(ob, "..but the spell still hits you!\n");
      } else {
        damage = damage / 2;
      }
    }
    if(this_player()->query_tester())
      write("Damage: "+damage+"\n");


    caster->attack_object(ob, 1);
    ob->hit_with_spell(damage, dam_type, caster);
    if(!ob) return 1; /* return if npc is dead */

    if (ob->query_resists(dam_type) == 100) {
        write(capitalize(target) + " is COMPLETELY unharmed!\n");
    }
    else if (ob->query_resists(dam_type) >= 90) {
        write(capitalize(target) + " seems unharmed!\n");
    }
    else if (ob->query_resists(dam_type) >= 70) {
        write(capitalize(target) + " seems to shrug off the "+text_word2+"!\n");
    }
    source = this_player()->query_skills("invoke ethereal mana");
    source = ob->query_resists(dam_type) * boost * source / 10000;
    if(source > 0) {
      write("You invoke ethereal mana and save some of your own.\n");
      this_player()->add_sp(source);
    }

    counter = present("blast counter", this_player());
    if(!counter) {
      counter = clone_object("/guilds/obj/blast_counter");
      move_object(counter, this_player());
    }
    value = this_player()->query_skills("stunning blast") - ob->query_skills("stunning blast")/2;

    /* ei toimi eq monsuihin //Celtron */
    if(!ob->query_kill_log() && value > 0 && counter->add_stun_count(value)) {
      ob->set_stunned(2);
      write("You stun "+ob->query_name()+" with your spell!\n");
      tell_object(ob, "You are STUNNED by the spell!\n");
    }

    /* toimii vain skilleihin. counter spelli toimii spellejä vastaan. //Celtron */
    value = this_player()->query_skills("distract concentration") - ob->query_skills("distract concentration")/2;
    if (ob->query_use_skill()) {
      if(value > 0 && counter->add_distract_count(value)) {
          write("You break "+ob->query_name()+"'s skill concentration!\n");
          tell_object(ob, "The spell breaks your skill concentration!\n");
          if (ob->query_use_skill())
                ob->query_use_skill()->interrupt_skill();       
      }
    }
    return 1;
}
