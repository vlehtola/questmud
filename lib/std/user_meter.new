/* //Celtron */

#define SAVEFILE "/std/user_meter_data"
#define OUTPUT "/log/user_meter"
#define OUTPUT_AVG "/log/user_meter_avg"

int *user;

reset(arg) {
  if(arg) return;
  if(!restore_object(SAVEFILE))
    save_object(SAVEFILE);
  call_out("half_hour", 0);
}

static half_hour() {
  int usr, usr_ld, *new;
  object ob;
  int i;
  ob = users();
  for(i=0;i<sizeof(ob);i++) {
    if(ob[i]->query_link_dead())
      usr_ld += 1;
    else
      usr += 1;
  }
  new = ({ time(), usr, usr_ld, });
  if(!user) user = ({ new, });
  else user = user + ({ new, });
  save_object(SAVEFILE);
  call_out("half_hour", (30*60));
}

average_output() {
  string out;
  int i, *average, slot;
  if(this_player()->query_wiz() != 5) return 0;
  average = allocate(24); /* one hour steps */
  for(i=0; i < sizeof(user); i++) {
    slot = to_int(ctime(time())[11..12]);
    if(!average[slot]) average[slot] = allocate(2);
    average[slot][0] += user[i][1];
    average[slot][1] += user[i][2];
  }
  write("Displaying average of "+i+" counts.\n");

  for(i=0; i < sizeof(average); i++) {
    out = "#########@#########@#########@#########@##########@#########@#########@"[0..(average[i][0]-1)] +
	  ".........,.........,.........,.........,..........,.........,.........,"[0..(average[i][1]-1)];
    write_file(OUTPUT_AVG, i+".00-"+(i+1)+".00 "+out+"\n");
  }
  write(OUTPUT_AVG+" updated.\n");
  return 1;
}
