inherit "obj/monster";

int follow;

reset(arg) {
  ::reset(arg);
  if(arg) { return; }
  set_level(567);
  set_name("dawn");
  set_alias("angel");
  set_short("Dawn, daughter of the universe");
  set_long("Dawn. The daughter of the universe is standing here, watching.\n");
  set_aggressive(0);
  set_gender(2);
  set_random_pick(0);
  set_regen(query_max_hp()/20);
  set_resists("physical", 90);
  set_resists("fire", 90);
  set_al_aggr(200);
  set_al(100);
  set_max_sp(query_max_sp()*4);
  set_sp(query_max_sp());
  set_mage();
  set_str(query_str()*40);
}

order(arg) {
  string cmd, param, temp_cmd;

  if(sscanf(arg, "dawn to %s", cmd) != 1) return;

  if(sscanf(cmd, "%s %s", temp_cmd, param) == 2) cmd = temp_cmd;

  switch(cmd) {
  case "follow":
    write("Dawn says: 'Ok, following.'\n");
    follow = 1;
    break;
  case "hold":
    write("Dawn says: 'Ok, holding here.'\n");
    follow = 0;
    break;
  case "block":
    if(!param) {
      write("Dawn says 'Block what?'\n");
      return 1;
    }
    set_block_dir(param);
    write("Dawn says 'Blocking now "+param+"'\n");
    break;
  default:
  }    
  return 1;
}

block_move() {
  if(this_player()->query_name() == "Archsin") {
    write("Chaos says 'You may pass.'\n");
    return;
  }
  else {
    write("Chaos says 'You may not pass.'\n");
    return 1;
  }
}

void init() {
  ::init();
  add_action("order", "order");
}

void heart_beat() {
  ::heart_beat();
  if(!present("archsin", environment(this_object())) && find_player("archsin") && follow) {
    say(capitalize(name)+" goes away.\n");
    move_object(this_object(), environment(find_player("archsin")));
    say(capitalize(name)+" arrives.\n");
  }
}

catch_tell(str) {
  string tmp1,tmp2;
  object ob;
  if (sscanf(str, "%s says '%s'", tmp1, tmp2) == 2) {
    ob = find_player("archsin");
    if (!ob) { return; }
    tell_object(ob, "[Dawn]: "+tmp1+" says: '"+tmp2+"'\n");
  }
} 
