int channels(string arg) {

  string channcomm, argument,channame,arg2;

  string nimi, chanu;

  if(!arg) {

    CHANNEL_D->channel_list();

    return 1;

  }

  if(sscanf(arg,"%s %s",channcomm,argument)==1) {

    channcomm=arg;

  }

  if(channcomm=="create") {

    if(!argument) {

      write("You must give name to the channel that you want create.\n");

      return 1;

    }

    CHANNEL_D->add_channel(argument);

    return 1;

  }

if(channcomm=="topic") {

    if(!argument) {

      write("You must give an argument to this command.\n");

      return 1;

    }

    if(sscanf(argument,"%s %s",channame,arg2)!=2) {

      channame=argument;

    }

    CHANNEL_D->change_topic(channame,arg2);

    return 1;

}

  if(channcomm=="join") {

    if(!argument) { 

      write("That channel command demands an argument.\n");

      return 1;

    }

    if(CHANNEL_D->channel_exists(argument)==0) {

      write("No such channel.\n");

      return 1;

    }

    if(CHANNEL_D->valid_join(argument)==0) {

      write("No such channel.\n");

      return 1;

    }

    this_object()->add_channel(argument);

    write("You join channel "+argument+".\n");

    return 1;

  }

  if(channcomm=="who") {

    if(!argument) {

      write("This channel command requires an argument.\n");

      return 1;

    }

    if(CHANNEL_D->write_channel_who(argument)) return 1;

    else {

      write("No such channel.\n");

      return 1;

    }

  }

  if(channcomm=="send") {

    if(!argument) {

      write("That channel command demands an argument.\n");

      return 1;

    }

    if(sscanf(argument,"%s %s",channame,arg2)!=2) {

      if(channame=="inform") return 0;

      write("Say what on channel??\n");

      return 1;

    }

    if(channame=="inform") return 0;

    if(sizeof(lochannels)==0) {

      write("You are not on such channel.\n");  

      return 1;

    }

    if(member_array(channame,lochannels)==-1) {

      write("You are not on such channel.\n");  

      return 1;

    }

    CHANNEL_D->send_to_channel(channame,arg2);

    return 1;

  }

  if(channcomm=="leave") {

    if(this_object()->remove_channel(argument)) {

      write("You left the channel.\n");

      return 1;

    }

    else {

      write("You are not on such channel.\n");

      return 1;

    }

  }

  write("No such channel command yet implemented.\n");

  return 1;

}



int add_channel(string chan) {

  if(sizeof(lochannels)>0) {

    if(member_array(chan,lochannels)==-1) {

      lochannels=lochannels+({ chan });

      add_action("channel_parser",chan);

      return 1;

    }

  }

  else {

    lochannels=({ chan });

    add_action("channel_parser", chan);

    return 1;

  }

  return 0;

}



int remove_channel(string chan) {

  if(sizeof(lochannels)>0) {

    if(member_array(chan,lochannels)!=-1) {

      lochannels=lochannels-({ chan });

      return 1;

    }

  }

  return 0;

}



string *query_channel() { return lochannels; }



int channel_parser(string arg) {

  if(sizeof(lochannels)==0) return 0;

  if(member_array(query_verb(),lochannels)==-1) return 0;

  if(!arg) { 

    this_object()->channels("who "+query_verb());

    return 1;

  }

  if(query_verb()=="inform" && arg == "last") {

    CHANNEL_D -> send_to_channel(query_verb(), arg);

    return 1;

  }

  if(query_verb()=="inform" && this_player()->query_wiz() < 3) return 0;

  CHANNEL_D->send_to_channel(query_verb(),arg);

  return 1;

}

