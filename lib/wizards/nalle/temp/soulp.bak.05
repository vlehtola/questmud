/* Modified for genders: padrone, Oct 22 1990 */
/* Additions and upgrades for soul.c completed on 22.6.1998 by Nalle */

object the_owner;
string cap_name;
string adverb;
string bodypart;

get() {
    the_owner = this_player();
    cap_name = call_other(this_player(), "query_name", 0);
    return 1;
}

drop() { return 1; }

id(str) { return str == "soul_object"; }

long() {
    write("It is transparent.\n");
}

ghost() {
    the_owner = this_player();
    cap_name = call_other(this_player(), "query_name", 0);
    return call_other(this_player(), "query_ghost");
}

init() {
    the_owner = this_player();
    cap_name = call_other(this_player(), "query_name", 0);
    add_action("emotes", "emotes");   
    add_action("adverbs", "adverbs"); 
    add_action("ack", "ack");
    add_action("agree", "agree");
    add_action("ah", "ah");
    add_action("apologize", "apologize");
    add_action("applaud", "applaud");
    add_action("argh", "argh");
    add_action("bark", "bark");
    add_action("beg", "beg");
    add_action("bleed", "bleed");
    add_action("blink", "blink");
    add_action("blush", "blush");
    add_action("boo", "boo");
    add_action("bore", "bore");
    add_action("bored", "bored");  
    add_action("bounce", "bounce");
    add_action("bow", "bow");
    add_action("burp", "burp");  
    add_action("cackle", "cackle");
    add_action("calculate", "calculate");
    add_action("caress", "caress");
}

get_adverb(str) {
    if (str == "angrily") { return str; }
    if (str == "arrogantly") { return str; }
    if (str == "awfully") { return str; }
    if (str == "audibly") { return str; }
    if (str == "badly") { return str; }
    if (str == "beautifully") { return str; }
    if (str == "boredly") { return str; }
    if (str == "boldly") { return str; }
    if (str == "brilliantly") { return str; }
    if (str == "briefly") { return str; }
    if (str == "bluntly") { return str; }
    if (str == "bitterly") { return str; }
    if (str == "calmly") { return str; }
    if (str == "cheerfully") { return str; }    
    if (str == "coldly") { return str; }
    if (str == "clearly") { return str; }
    if (str == "closely") { return str; }
    if (str == "comically") { return str; }
    if (str == "cruelly") { return str; }
    if (str == "cutely") { return str; }
    if (str == "decently") { return str; }
    if (str == "deeply") { return str; }
    if (str == "determinedly") { return str; }
    if (str == "diabolically") { return str; }
    if (str == "demonically") { return str; }
    if (str == "dirtily") { return str; }
    if (str == "dignifiedly") { return str; }
    if (str == "disgustingly") { return str; }
    if (str == "drily") { return str; }
    if (str == "dizzily") { return str; }
    if (str == "eerily") { return str; }
    if (str == "elegantly") { return str; }
    if (str == "enthousiastically") { return str; }
    if (str == "endlessly") { return str; }
    if (str == "erotically") { return str; }
    if (str == "evilly") { return str; }
    if (str == "fabulously") { return str; }
    if (str == "flegmatically") { return str; }
    if (str == "fearlessly") { return str; }
    if (str == "fearfully") { return str; }
    if (str == "firmly") { return str; }
    if (str == "fiercefully") { return str; }
    if (str == "frankly") { return str; }
    if (str == "funnily") { return str; }
    if (str == "frenetically") { return str; }
    if (str == "gently") { return str; }
    if (str == "girlishly") { return str; }
    if (str == "gleefully") { return str; }
    if (str == "happily") { return str; }
    if (str == "heartily") { return str; }
    if (str == "heinously") { return str; }
    if (str == "hellishly") { return str; }
    if (str == "helplessly") { return str; }
    if (str == "hilariously") { return str; }
    if (str == "humbly") { return str; }
    if (str == "hungrily") { return str; }
    if (str == "horribly") { return str; }
    if (str == "hornily") { return str; }
    if (str == "idly") { return str; }
    if (str == "lazily") { return str; }
    if (str == "lovingly") { return str; }
    if (str == "magically") { return str; }
    if (str == "majestically") { return str; }
    if (str == "mercifully") { return str; }
    if (str == "mercilessly") { return str; }
    if (str == "mildly") { return str; }
    if (str == "mimically") { return str; }
    if (str == "merrily") { return str; }
    if (str == "menacingly") { return str; }
    if (str == "mightily") { return str; }
    if (str == "malevolently") { return str; }
    if (str == "meekly") { return str; }
    if (str == "miserably") { return str; }
    if (str == "mischievously") { return str; }
    if (str == "mockingly") { return str; }
    if (str == "mournfully") { return str; }
    if (str == "monstrously") { return str; }
    if (str == "musically") { return str; }
    if (str == "nicely") { return str; }
    if (str == "neatly") { return str; }
    if (str == "nonchalantly") { return str; }
    if (str == "obscurely") { return str; }
    if (str == "oddly") { return str; }
    if (str == "painfully") { return str; }
    if (str == "powerfully") { return str; }
    if (str == "pitifully") { return str; }
    if (str == "openly") { return str; }
    if (str == "promptly") { return str; }
    if (str == "patiently") { return str; }
    if (str == "pervertedly") { return str; }
    if (str == "philantropically") { return str; }
    if (str == "politely") { return str; }
    if (str == "philosophically") { return str; }
    if (str == "poetically") { return str; }
    if (str == "proudly") { return str; }
    if (str == "protectively") { return str; }
    if (str == "quizzically") { return str; }
    if (str == "quickly") { return str; }
    if (str == "repeatedly") { return str; }
    if (str == "rhetorically") { return str; }
    if (str == "remorsefully") { return str; }
    if (str == "sadly") { return str; }
    if (str == "scornfully") { return str; }
    if (str == "sarcastically") { return str; }
    if (str == "slowly") { return str; }
    if (str == "strangely") { return str; }
    if (str == "sheepishly") { return str; }
    if (str == "sensually") { return str; }
    if (str == "sexily") { return str; }
    if (str == "satanically") { return str; }
    if (str == "sceptically") { return str; }
    if (str == "shrilly") { return str; }
    if (str == "silently") { return str; }
    if (str == "sternly") { return str; }
    if (str == "skillfully") { return str; }
    if (str == "sinfully") { return str; }
    if (str == "subconsciously") { return str; }
    if (str == "subtly") { return str; }
    if (str == "tunefully") { return str; }
    if (str == "toothlessly") { return str; }
    if (str == "thoughtfully") { return str; }
    if (str == "vengefully") { return str; }
    if (str == "utterly") { return str; }
    if (str == "wholeheartedly") { return str; }
    if (str == "wrongfully") { return str; }
    if (str == "wetly") { return str; }
    if (str == "weirdly") { return str; }
    if (str == "wickedly") { return str; }
    if (str == "wimpily") { return str; }
    if (str == "wondrously") { return str; }
    if (str == "wryly") { return str; }
    if (str == "wrathfully") { return str; }
    if (str == "xenophobically") { return str; }
    if (str == "zealously") { return str; }
    if (str == "zen-likely") { return str; }
    if (str == "zymotically") { return str; }
}

get_bodypart(str) {
    /* Approx. alphabetical order, please. */
    if (str == "arm") { return str; }
    if (str == "ankle") { return str; }
    if (str == "back") { return str; }
    if (str == "butt") { return str; }
    if (str == "buttocks") { return str; }
    if (str == "cheek") { return str; }
    if (str == "eye") { return str; }
    if (str == "elbow") { return str; }
    if (str == "fingers") { return str; }
    if (str == "finger") { return str; }
    if (str == "foot") { return str; }
    if (str == "hand") { return str; }
    if (str == "head") { return str; }
    if (str == "knee") { return str; }
    if (str == "neck") { return str; }
    if (str == "nose") { return str; }
    if (str == "shoulder") { return str; }
    if (str == "stomachavailable emotes type 'help emotes'.\n");
        return 1;
} 

adverbs() {
    if (ghost())
        return 0;
    write("To list the available adverbs and bodyparts type 'help adverbs'.\n");
    return 1;
}


ack(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You ack.\n");
 say(cap_name + " acks.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "thoughtfully"; }
 tell_object(who, cap_name + " acks at you " + adverb + ".\n");
 write("You ack at " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " acks at " + capitalize(target) + " " + adverb +".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You ack " + adverb + ".\n");
 say(cap_name + " acks " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " acks at you.\n");
 write("You ack at " + capitalize(str) + ".\n");
 say(cap_name + " acks at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


agree(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You agree.\n");
 say(cap_name + " agrees.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "fully"; }
 tell_object(who, cap_name + " agrees with you " + adverb + ".\n");
 write("You agree with " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " agrees with " + capitalize(target) + " " + adverb +".\n",who);
    return 1;
                                                }

    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You agree " + adverb + ".\n");
 say(cap_name + " agrees " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " agrees you.\n");
 write("You agrees with " + capitalize(str) + ".\n");
 say(cap_name + " agrees with " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


ah(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You go 'Ah' in comprehension.\n");
 say(cap_name + " goes 'Ah' in comprehension.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "comprehensively"; }
 tell_object(who, cap_name + " goes 'Ah' at you " + adverb + ".\n");
 write("You go 'Ah' at " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " goes 'Ah' at " + capitalize(target) + " " + adverb
+".\n",who);
    return 1;
                                                }

    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You go 'Ah' " + adverb + ".\n");
 say(cap_name + " goes 'Ah' " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " goes 'Ah' at you.\n");
 write("You go 'Ah' at " + capitalize(str) + ".\n");
 say(cap_name + " goes 'Ah' at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


apologize(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You apologize.\n");
 say(cap_name + " apologizes.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "humbly"; }
 tell_object(who, cap_name + " apologizes to you " + adverb + ".\n");
 write("You apologizes to " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " apologizes to " + capitalize(target) + " " + adverb +".\n",who);
    return 1;
                                                }

    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You apologize " + adverb + ".\n");
 say(cap_name + " apologizes " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " apologizes to you.\n");
 write("You apologize to " + capitalize(str) + ".\n");
 say(cap_name + " apologizes to " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


applaud(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You applaud.\n");
 say(cap_name + " applauds.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "wholeheartedly"; }
 tell_object(who, cap_name + " applauds at you " + adverb + ".\n");
 write("You applaud at " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " applauds at " + capitalize(target) + " " + adverb
+".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You applaud " + adverb + ".\n");
 say(cap_name + " applauds " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " applauds at you.\n");
 write("You applaud at " + capitalize(str) + ".\n");
 say(cap_name + " applauds at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


argh(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You screams 'AARGH'.\n");
 say(cap_name + " screams 'AARGH'.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "hellishly"; }
 tell_object(who, cap_name + " screams 'AARGH' at you " + adverb + ".\n");
 write("You scream 'AARGH'  at " + capitalize(target) + " " + adverb +
 ".\n");
 say(cap_name + " screams 'AARGH'  at " + capitalize(target) + " " +
 adverb +".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You scream 'AARGH' " + adverb + ".\n");
 say(cap_name + " screams 'AARGH' " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " screams 'AARGH' at you.\n");
 write("You scream 'AARGH' at " + capitalize(str) + ".\n");
 say(cap_name + " screams 'AARGH' at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


bark(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You start barking like a dog.\n");
 say(cap_name + " starts barking like a dog.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || et) + " " + adverb
+".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You bark " + adverb + ".\n");
 say(cap_name + " barks " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " barks at you.\n");
 write("You bark at " + capitalize(str) + ".\n");
 say(cap_name + " barks at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}

beg(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You beg for mercy.\n");
 say(cap_name + " begs for mercy.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "pitifully"; }
 tell_object(who, cap_name + "  " + adverb + " begs you.\n");
 write("You beg " + adverb + " " + capitalize(target) + ".\n");
 say(cap_name + " " + adverb + " begs " + capitalize(target) +".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You beg " + adverb + ".\n");
 say(cap_name + " begs " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " begs you.\n");
 write("You beg " + capitalize(str) + ".\n");
 say(cap_name + " begs " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


bleed(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("Your wounds bleed alarmingly.\n");
 say(cap_name + "'s wounds bleed alarmingly.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "relentlessly"; }
 tell_object(who, cap_name + " bleeds on you " + adverb + ".\n");
 write("You bleed on " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " bleeds on " + capitalize(target) + " " + adverb +".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You bleed " + adverb + ".\n");
 say(cap_name + "bleeds " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " bleeds on you.\n");
 write("You bleed on " + capitalize(str) + ".\n");
 say(cap_name + " bleed on " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


blink(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You blink in disbelief.\n");
 say(cap_name + " blinks in disbelief.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "thoughtfully"; }
 tell_object(who, cap_name + " blinks at you " + adverb + ".\n");
 write("You blink at " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " blinks at " + capitalize(target) + " " + adverb
+".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You blink " + adverb + ".\n");
 say(cap_name + " blinkss " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " blinkss at you.\n");
 write("You blink at " + capitalize(str) + ".\n");
 say(cap_name + " blinks at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


blush(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You blush to a deep crimson.\n");
 say(cap_name + " blushes to a deep crimson.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "shyly"; }
 tell_object(who, cap_name + " blushes and turns away from you " + adverb + ".\n");
 write("You blush and turn away from " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " blushes and turns away from " + capitalize(target) + " "
 + adverb +".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You blush " + adverb + ".\n");
 say(cap_name + " blushes " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " blushes and turns away from you.\n");
 write("You blush and turn away from " + capitalize(str) + ".\n");
 say(cap_name + " blushes and turns away from " + capitalize(str) +
 ".\n",who);
    return 1;
                      }  
}

boo(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You let out a 'Boo' of disappointment.\n");
 say(cap_name + " lets out a 'Boo' of disappointment.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "insolently"; }
 tell_object(who, cap_name + " boos at you " + adverb + ".\n");
 write("You boo at " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " boos at " + capitalize(target) + " " + adverb +".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You boo " + adverb + ".\n");
 say(cap_name + " boos " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " boos at you.\n");
 write("You boo at " + capitalize(str) + ".\n");
 say(cap_name + " boos at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


bore(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You bore your audience.\n");
 say(cap_name + " is boring.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "immensly"; }
 tell_object(who, cap_name + " bores you " + adverb + ".\n");
 write("You bore " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " bores " + capitalize(target) + " " + adverb
+".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You bore everyone " + adverb + ".\n");
 say(cap_name + " bores everyone " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " bores you.\n");
 write("You bore " + capitalize(str) + ".\n");
 say(cap_name rn 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "immensly"; }
 tell_object(who, cap_name + " seems " + adverb + " bored by you.\n");
 write("You seem " + adverb + " bored by " + capitalize(target) + ".\n");
 say(cap_name + " seems " + adverb + " bored by " + capitalize(target) +
 ".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You're " + adverb + " bored.\n");
 say(cap_name + " is " + adverb + " bored.\n");
    return 1;  } else {
 tell_object(who, cap_name + " seems bored by you.\n");
 write("You seem bored by " + capitalize(str) + ".\n");
 say(cap_name + " seems bored by " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


bounce(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You bounce around the room.\n");
 say(cap_name + " bounces around the room.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "happily"; }
 tell_object(who, cap_name + " bounces around you " + adverb + ".\n");
 write("You bounce around " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " bounces around " + capitalize(target) + " " + adverb +
 ".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You bounce around " + adverb + ".\n");
 say(cap_name + " bounces around " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " bounces around you.\n");
 write("You bounce around " + capitalize(str) + ".\n");
 say(cap_name + " bounce around " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}

bow(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You bow to your audience.\n");
 say(cap_name + " bows gracefully.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "gracefully"; }
 tell_object(who, cap_name + " bows before you " + adverb + ".\n");
 write("You bow before " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " bows before " + capitalize(target) + " " + adverb +
 ".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You bow " + adverb + ".\n");
 say(cap_name + " bows " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " bows before you.\n");
 write("You bow before " + capitalize(str) + ".\n");
 say(cap_name + " bows before " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


burp(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You burp.\n");
 say(cap_name + " burps.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "noisily"; }
 tell_object(who, cap_name + " burps at you " + adverb + ".\n");
 write("You burp at " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " burps at " + capitalize(target) + " " + adverb +
 ".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You burp " + adverb + ".\n");
 say(cap_name + " burps " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " burps at you.\n");
 write("You burp at " + capitalize(str) + ".\n");
 say(cap_name + " burps at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


cackle(str) {
    object who;
    string target;

    if (ghost()) return 0;

    if(!str)   {  
 write("You cackle with an evil look in your eyes.\n");
 say(cap_name + " cackles with en evil look in his eyes.\n");
    return 1;  }

    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "evilly"; }
 tell_object(who, cap_name + " cackles at you " + adverb + ".\n");
 write("You cackle at " + capitalize(target) + " " + adverb + ".\n");
 say(cap_name + " cackles at " + capitalize(target) + " " + adverb +
 ".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    adverb = get_adverb(str);
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     if(!adverb) return 0;

    if(adverb) {    
 write("You cackle " + adverb + ".\n");
 say(cap_name + " cackles " + adverb + ".\n");
    return 1;  } else {
 tell_object(who, cap_name + " cackles at you.\n");
 write("You cackle at " + capitalize(str) + ".\n");
 say(cap_name + " cackles at " + capitalize(str) + ".\n",who);
    return 1;
                      }  
}


calculate() {
    if (ghost())
        return 0;
    write("You start calculating pi's decimals...\n");
    say(cap_name + " started calculating pi's decimals once again.\n");
    return 1;
}   


caress(str) {
    object who;
    string target;

    if (ghost()) return 0;
    if (!str)  return 0; 

    if (sscanf(str, "%s %s %s", target, adverb, bodypart))   {
    adverb=get_adverb(adverb);
    bodypart=get_bodypart(bodypart);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if (!adverb) { adverb = "affectionally"; }
    if (!bodypart) { bodypart = "head"; }
 tell_object(who, cap_name + " caresses your "+ bodypart +" "+ adverb +
 ".\n");
 write("You caress " + capitalize(target) + "'s " + bodypart +" "+ adverb + 
 ".\n");
 say(cap_name + " caresses " + capitalize(target) + "'s " + bodypart +
 " " + adverb +".\n",who);
    return 1;
                                                }


    if (sscanf(str, "%s %s", target, adverb))   {
    adverb=get_adverb(adverb);
    bodypart=get_bodypart(adverb);
    who = present(target, environment(this_player()));
    if (!who || !living(who) || who == this_player()) return 0;
    if ((!adverb) && (!bodypart)) 
    { adverb="affectionally";  bodypart="head"; }
    if ((!adverb) && (bodypart)) adverb="affectionally";
    if ((adverb) && (!bodypart)) bodypart="head";

 tell_object(who, cap_name + " caresses your " + bodypart + " "+ adverb +".\n");
 write("You caress " + capitalize(target) + "'s " + bodypart + " "+ adverb + ".\n");
 say(cap_name + " caresses " + capitalize(target) + "'s " + bodypart +
 " " + adverb +".\n",who);
    return 1;
                                                }
    /* It is either a name or an adverb */
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
     return 0;

 tell_object(who, cap_name + " caresses you.\n");
 write("You caress " + cap